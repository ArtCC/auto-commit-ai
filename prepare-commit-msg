#!/usr/bin/env xcrun swift

import Foundation

// MARK: — Logging function

// Determine the directory of the hook script
let scriptPath = URL(fileURLWithPath: CommandLine.arguments[0])
let hookDirectory = scriptPath.deletingLastPathComponent()
let logURL = hookDirectory.appendingPathComponent("prepare-commit-msg.log")

func log(_ msg: String) {
    let timestamp = ISO8601DateFormatter().string(from: Date())
    let line = "[\(timestamp)] \(msg)\n"
   
    if let data = line.data(using: .utf8) {
        if FileManager.default.fileExists(atPath: logURL.path) {
            if let handle = try? FileHandle(forWritingTo: logURL) {
                handle.seekToEndOfFile()
                handle.write(data)
                handle.closeFile()
            }
        } else {
            try? data.write(to: logURL)
        }
    }
}

// MARK: — Command execution helper

@discardableResult
func shell(_ args: String...) -> (output: String, status: Int32) {
    log("Running command: \(args.joined(separator: " "))")

    let task = Process()
    task.launchPath = "/usr/bin/env"
    task.arguments = args

    let pipe = Pipe()
    task.standardOutput = pipe
    task.standardError = pipe
    task.launch()

    let data = pipe.fileHandleForReading.readDataToEndOfFile()

    task.waitUntilExit()

    let output = String(decoding: data, as: UTF8.self)

    log("Command finished with status \(task.terminationStatus); output prefix: \(output.prefix(200))")

    return (output, task.terminationStatus)
}

// MARK: — 1) Read arguments

let args = CommandLine.arguments

log("Received arguments: \(args)")

guard args.count >= 2 else {
    log("Error: insufficient number of arguments.")
    exit(1)
}

let commitMsgPath = args[1]
let commitSource  = args.count > 2 ? args[2] : ""

log("commitMsgPath = \(commitMsgPath), commitSource = \(commitSource)")

// Skip specific commit sources (merge, squash, amend)
let skipSources: Set<String> = ["merge", "squash", "commit"]

if skipSources.contains(commitSource) {
    log("Commit source '\(commitSource)' not processable, exiting.")

    exit(0)
}

// MARK: — 2) Get staged diff

let (diff, status) = shell("git", "diff", "--cached")

guard status == 0 else {
    log("Error getting diff: status \(status)")
    exit(1)
}

guard !diff.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
    log("No staged changes; exiting.")
    exit(0)
}

log("Staged diff obtained (first 500 chars): \(diff.prefix(500))")

// MARK: — 3) Embedded API key

// Replace "YOUR_API_KEY_HERE" with your actual OpenAI API key
let finalKey = "YOUR_API_KEY_HERE"

if finalKey.isEmpty {
    log("Error: API key not set in script.")

    fputs("Error: edit the script and insert your API key in the finalKey variable.\n", stderr)

    exit(1)
}

log("API key loaded from script.")

// Prepare OpenAI request
struct Message: Codable { let role: String; let content: String }
struct ChatRequest: Codable {
    let model: String
    let messages: [Message]
    let temperature: Double
    let max_tokens: Int
}
struct Choice: Codable { struct Inner: Codable { let content: String } ; let message: Inner }
struct ChatResponse: Codable { let choices: [Choice] }

let systemPrompt = Message(
    role: "system",
    content: """
    You are a professional commit message generator. \
    Given a code diff, produce a concise, factual and well-structured commit message in imperative style. \
    Do NOT add any opinions, advice, or extra commentary. \
    Focus only on summarizing what changed, why, and how, using neutral, technical language.
    """
)
let userPrompt = Message(
    role: "user",
    content: """
    Here is the diff of staged changes:
    ```
    \(diff)
    ```
    Generate ONLY the commit message summarizing these changes. \
    Do NOT include opinions, explanations of best practices, or commentary—just the facts.
    """
)
let chatReq = ChatRequest(
    model: "gpt-4o-mini",
    messages: [systemPrompt, userPrompt],
    temperature: 0.2,
    max_tokens: 1000
)

// Construct and send HTTP request
guard let url = URL(string: "https://api.openai.com/v1/chat/completions"),
      let body = try? JSONEncoder().encode(chatReq) else {
    log("Error: failed to create URL or encode request body.")

    exit(1)
}

var request = URLRequest(url: url)
request.httpMethod = "POST"
request.setValue("Bearer \(finalKey)", forHTTPHeaderField: "Authorization")
request.setValue("application/json", forHTTPHeaderField: "Content-Type")
request.httpBody = body

log("Sending request to OpenAI…")

let sem = DispatchSemaphore(value: 0)

var generatedSummary: String?

let task = URLSession.shared.dataTask(with: request) { data, resp, err in
    defer { sem.signal() }

    if let err = err {
        log("Request error: \(err.localizedDescription)")

        return
    }

    guard let data = data,
          let chatResp = try? JSONDecoder().decode(ChatResponse.self, from: data),
          let text = chatResp.choices.first?.message.content else {
        log("Error parsing OpenAI response.")

        return
    }

    generatedSummary = text.trimmingCharacters(in: .whitespacesAndNewlines)

    log("Generated summary (first 200 chars): \(generatedSummary!.prefix(200))")
}

task.resume()

if sem.wait(timeout: .now() + 15) == .timedOut {
    log("OpenAI request timed out.")
}

// MARK: — 4) Prepend to commit message
guard let summary = generatedSummary, !summary.isEmpty else {
    log("No summary generated; exiting.")

    exit(0)
}

do {
    log("Reading original commit message.")

    let original = try String(contentsOfFile: commitMsgPath, encoding: .utf8)
    let newMsg = summary +
    "\n\n" + original

    log("Writing new commit message.")

    try newMsg.write(toFile: commitMsgPath, atomically: true, encoding: .utf8)

    log("Commit message updated successfully.")
} catch {
    log("Error writing commit message: \(error.localizedDescription)")

    fputs("Error writing commit message: \(error)\n", stderr)

    exit(1)
}
